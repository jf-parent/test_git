---
- hosts: all
  become: true
  vars_files:
    - defaults/main.yml
  pre_tasks:
    - name: Install python build deps
      command: yum-builddep python -y
    - name: install deps
      yum:
        name={{"{{"}} item {{"}}"}}
        state=latest
      with_items:
        - vim
        - wget
        - policycoreutils-python
        - git
  roles:
   - { role: samsixtyone.epel }
   - { role: FrogyYen.centos7-nginx }
   - { role: geerlingguy.redis }
   - { role: olibob.nodejs }
   {%- if cookiecutter.database == 'mongodb' %}
   - { role: ice9js.mongodb }
   {%- elif cookiecutter.database == 'postgresql' %}
   - { role: dblenkus.postgresql }
   {%- else %}
   - { role: aplyca.MySQL }
   {% endif %}
   - { role: jffz.netdata }
  tasks:
    - name: install the latest version of JQ
      yum: name=jq state=latest
    - name: install monit
      yum: name=monit state=latest
    - name: py35 | Check that py35 is still not installed
      stat: path="{{"{{"}} py35_bin {{"}}"}}"
      register: py35_already_installed
      ignore_errors: True
    - name: py35 | Download
      get_url:
        url="{{"{{"}} py35_url {{"}}"}}"
        dest="{{"{{"}} py35_tar_file {{"}}"}}"
        checksum="md5:{{"{{"}} py35_md5 {{"}}"}}"
      when: py35_already_installed.stat.exists == false
    - name: py35 | Uncompress
      unarchive:
        src={{"{{"}} py35_tar_file {{"}}"}}
        dest=/tmp
        copy=no
        creates="{{"{{"}} py35_sources {{"}}"}}"
      when: py35_already_installed.stat.exists == false
    - name: py35 | Compile and install
      command: "{{"{{"}} item {{"}}"}}"
      args:
        chdir: "{{"{{"}} py35_sources {{"}}"}}"
      with_items:
        - "./configure --prefix {{"{{"}} py35_install {{"}}"}}"
        - make
        - make install
      when: py35_already_installed.stat.exists == false
    - name: py35 | Create python_major_version symlink
      file:
        src={{"{{"}} py35_bin {{"}}"}}
        dest='/bin/python3.5'
        state=link
      when: py35_already_installed.stat.exists == false
    - name: py35 | Create python_major_version symlink
      file:
        src={{"{{"}} py35_bin {{"}}"}}
        dest='/usr/local/bin/python'
        state=link
      when: py35_already_installed.stat.exists == false
    - name: pip35 | Create pip symlink
      file:
        src={{"{{"}} pip35_bin {{"}}"}}
        dest='/bin/pip3.5'
        state=link
      when: py35_already_installed.stat.exists == false
    - name: pip35 | Create pip symlink
      file:
        src={{"{{"}} py35_bin {{"}}"}}
        dest='/usr/local/bin/pip'
        state=link
      when: py35_already_installed.stat.exists == false
     {%- if cookiecutter.database == 'mongodb' %}
    - name: Mongo service
      service: state=started name=mongod
     {%- elif cookiecutter.database == 'postgresql' %}
    - name: Postgres service
      service: state=started name=postgresql
     {%- else %}
    - name: Mysql service
      service: state=started name=mysqld
     {% endif %}
    - name: Redis service
      service: state=started name=redis
    - name: install the yarn's repo
      shell: wget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo
    - name: install the latest version of yarn
      yum: name=yarn state=latest
    - name: install cookiecutter
      pip: executable="pip3.5" name=cookiecutter
    # PROJECT SPECIFIC
    - name: Project config
      template: src=templates/project.yml.j2 dest=/home/vagrant/project.yml
    - name: Configure project
      shell: python /srv/python3.5.1/lib/python3.5/site-packages/cookiecutter/cli.py https://github.com/jf-parent/webbase --config-file /home/vagrant/project.yml --no-input
      become: true
      become_user: vagrant
      ignore_errors: True
    - name: pip deps-dev
      pip: executable="pip3.5" requirements=/home/vagrant/{{cookiecutter.project_name}}/requirements-dev.txt
    - name: Server config
      become: true
      become_user: vagrant
      template: src=templates/server.json.j2 dest=/home/vagrant/{{cookiecutter.project_name}}/configs/server.json
    - name: Social config
      become: true
      become_user: vagrant
      template: src=templates/social_media.json.j2 dest=/home/vagrant/{{cookiecutter.project_name}}/configs/social_media.json
    - shell: yarn install
      become: true
      become_user: vagrant
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
    - shell: npm run build:prod
      become: true
      become_user: vagrant
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
      when: env == 'production'
    - shell: npm run build:dev
      become: true
      become_user: vagrant
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
      when: env == 'development'
    - shell: make init-db-sample-data
      become: true
      become_user: vagrant
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
      when: env == 'development'
    - name: nginx conf
      template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf
    - name: disable selinux
      selinux: state=disabled
      when: env == 'development'
    - name: set httpd_can_network_connect selinux
      seboolean: name=httpd_can_network_connect state=yes persistent=yes
      when: env == 'production'
    - shell: make start-server-prod
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
    - shell: make start-admin-prod
      args:
        chdir: /home/vagrant/{{cookiecutter.project_name}}
    - shell: printf "admin:$(openssl passwd -crypt '{{"{{"}}admin_password{{"}}"}}')" > /etc/nginx/passwords
    - name: Restart Nginx service
      service: state=restarted name=nginx
    - replace: dest=/etc/netdata/netdata.conf regexp='# bind to = \*' replace='bind to = localhost'
    - name: Restart Netdata service
      service: state=restarted name=netdata
    - name: monit conf
      template: src=templates/monitrc.j2 dest=/etc/monitrc mode=0700
    - name: Enable Monit service
      service: enabled=true name=monit
      when: env == 'production'
    - name: Start Monit service
      service: state=started name=monit
      when: env == 'production'
